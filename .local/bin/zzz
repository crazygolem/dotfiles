#!/bin/bash

###############################################################################
# Suspend timer that also handles turning off the screen.
#
# USAGE
#   zzz
#   zzz NUMBER[SUFFIX]...
#
# DESCRIPTION
#   Suspends after NUMBER seconds. SUFFIX may be 's' for seconds (the default),
#   'm' for minutes, 'h' for hours or 'd' for days. NUMBER may be an integer or
#   an arbitrary floating point number. Given two or more arguments, the sum of
#   all the arguments is used.
#
#   Without argument, suspends immediately.
###############################################################################


# Parses the time as would the GNU sleep command, and returns the number of
# seconds that the input corresponds to.
# Can also be used to validate arguments for GNU sleep.
parsetime() {
  # Values must be converted with `bc`, because GNU sleep accepts float values.
  local s p
  s=0

  for p in "$@"; do
    if [[ $p =~ ^[0-9]+(\.[0-9]+)?s?$ ]]; then
      s=$(echo "$s + ${p%s}" | bc)
    elif [[ $p =~ ^[0-9]+(\.[0-9]+)?m$ ]]; then
      s=$(echo "$s + ${p%m} * 60" | bc)
    elif [[ $p =~ ^[0-9]+(\.[0-9]+)?h$ ]]; then
      s=$(echo "$s + ${p%h} * 60 * 60" | bc)
    elif [[ $p =~ ^[0-9]+(\.[0-9]+)?d$ ]]; then
      s=$(echo "$s + ${p%d} * 60 * 60 * 24" | bc)
    else
      >&2 echo "invalid time suffix: $p"
      return 1
    fi
  done

  echo $s
}

screenoff() {
  # On X11, the X server handles DPMS and the screen can be turned off with
  #
  #     xset dpms force off
  #
  # However on wayland it doesn't work like that anymore.
  #
  # On Wayland with the Mutter compositor (default for GNOME), the following
  # command can be used to switch the screen's state:
  #
  #   busctl --user set-property org.gnome.Mutter.DisplayConfig \
  #     /org/gnome/Mutter/DisplayConfig org.gnome.Mutter.DisplayConfig \
  #     PowerSaveMode i 3
  #
  # However it doesn't handle turning the screen back on on keypress or mouse
  # movement (the screen stays off until the reverting command is explicitly
  # called). Note: The Mutter.DisplayConfig API is specified at [1].
  #
  # An alternative is to activate the screensaver, which does not lock the
  # screen and under GNOME turns off the screen almost immediately:
  #
  #     busctl --user call org.gnome.Shell /org/gnome/ScreenSaver \
  #       org.gnome.ScreenSaver SetActive b true
  #
  # The screensaver is disabled on key presses and mouse movements, so basically
  # acts like the `xset dpms force off` command in X11.
  #
  #
  # [1]: https://gitlab.gnome.org/GNOME/mutter/blob/master/src/org.gnome.Mutter.DisplayConfig.xml#L256

  case "$XDG_SESSION_TYPE" in
    x11)
      xset dpms force off
      ;;
    wayland)
      busctl --user call org.gnome.Shell /org/gnome/ScreenSaver \
        org.gnome.ScreenSaver SetActive b true
      ;;
    *)
      >&2 echo 'The screen cannot be turned off from this session.'
      ;;
  esac
}

# Displays a countdown for the specified number (int) of seconds.
countdown() {
  local s fmt
  s="$1"
  fmt='%s\r'
  if ((s>=86400)); then
    fmt='%id %s\r'
  fi

  SECONDS=0
  while [ $SECONDS -lt "$s" ]; do
    printf "$fmt" $(((s-SECONDS)/86400)) "$(date -ud @$((s-SECONDS)) +%T)"
    sleep 0.2
  done
  echo "That's all Folks!"
}

# Executes an action on key presses. The first argument is printed and the rest
# is executed.
oninput() {
  local char

  if [ -n "$1" ]; then
    echo "$1"
  fi
  shift

  # stderr redirected to /dev/null to avoid I/O error messages on suspend
  while IFS= read -srn1 char 2>/dev/null; do
    "$@"
  done
}

if [ $# -gt 0 ]; then
  seconds="$(parsetime "$@")" || exit 1

  # stdin must be explicitly forwarded to the background process, otherwise it
  # won't receive input except under weird circumstances (cf. past revisions).
  oninput "Press any key to turn off the screen or ^C to cancel" \
    screenoff \
    <&0 & pid=$!

  countdown "${seconds%.*}"
  kill $pid
fi

systemctl suspend -i
