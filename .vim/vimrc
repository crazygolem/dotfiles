""" Crazygolem's vimrc """""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" This vimrc file provides graceful degradation when some plugins are not
" installed. Restricted mode provides an enhanced status line, a lot of
" usability and mappings to basic functions.
"
" Corollary: You can copy this file in root's home directory to have a
" minimally usable vim (also statically copy the color scheme in root's
" ~/.vim/colors otherwise you won't have nice colors).
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" `:set nocp` has many side effects, so this should be done only when
" 'compatible' is set.
if &compatible
  set nocompatible
endif


"""""" Plugins """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Plugins are loaded by vim's built-in plugin manager; this requires vim 8+.
" Minpac is used to bootstrap and update plugins easily.
"
" Even if minpac is not installed, we still want to configure the other plugins,
" as they might have been installed manually. And since I like grouping the
" plugins' registration with their configuration, the "load minpac on-demand"
" technique cannot be used.
"
" BOOTSTRAPPING
" 1. Install minpac manually: https://github.com/k-takata/minpac#installation
" 2. :call minpac#update()
"
" AFTER ADDING A PLUGIN
" :call minpac#update()
"
" AFTER REMOVING A PLUGIN
" :call minpac#clean()

silent! packadd minpac

if exists('g:loaded_minpac')
  call minpac#init()
  function! s:pac(...)
    call call('minpac#add', a:000)
  endfunction
else
  function! s:pac(...)
    " no-op
  endfunction
endif

" Let minpac handle itself
call s:pac('k-takata/minpac', {'type': 'opt'})

" Color themes (makes them available, does not select one)
call s:pac('vim-scripts/wombat256.vim', {'type': 'opt'})
call s:pac('altercation/vim-colors-solarized', {'type': 'opt'})

" Create directories in path if they don't exist yet when saving
call s:pac('DataWraith/auto_mkdir')

" Omni completion on ctrl-space (default <tab> is too intrusive/frustrating)
" <c-space> cannot be mapped in vim console; <nul> is equivalent
call s:pac('ervandew/supertab')
let g:SuperTabMappingForward='<nul>'
let g:SuperTabMappingBackward='<s-nul>'

" Modification tree
call s:pac('sjl/gundo.vim')
let g:gundo_prefer_python3=1

" Buffer list
call s:pac('fholgado/minibufexpl.vim')

" Show CSS colors
call s:pac('ap/vim-css-color')

" Dummy text generator
call s:pac('vim-scripts/loremipsum')

" xterm color table, for scheme customization
call s:pac('guns/xterm-color-table.vim')

" File browser
call s:pac('preservim/nerdtree')

" Toggle mouse between vim and terminal capture
call s:pac('toadjaune/vim-togglemouse')

" Show syntax attribute of the character under cursor
call s:pac('vim-scripts/SyntaxAttr.vim')

" Table formatting
call s:pac('dhruvasagar/vim-table-mode')
let g:table_mode_corner='|' " Markdown-compatible tables

" Text alignment
call s:pac('godlygeek/tabular')


""" General """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Defines <leader>
let mapleader = 'Ã©'           " Very accessible on fr-CH layout

" Set vim's internal encoding (not files encoding!)
set encoding=utf-8            " Required to display Unicode glyphs


" Force write with sudo
command! W execute 'silent w !sudo tee '.shellescape(expand('%')).' >/dev/null'
  \| if v:shell_error > 0 | redraw | echoerr 'Write failed'
  "\ Reload the buffer to avoid the "buffer has changed" interactive message.
  "\ The view is saved and reloaded to avoid jumping around after the reload.
  "\ TODO: Delete the view after it has been reloaded, to prevend surprises in
  "\ some edge cases (e.g. if for some reason 'viewoptions' is not set
  "\ correctly, see 'Buffers' section).
  \| else | silent! mkview | edit! | silent! loadview
  \| endif
cmap w!! W

" Prevent mistakenly using ':X' instead of ':x'
" Source: http://stackoverflow.com/a/17794801
" Side-effect: prevents encryption altogether. Use ':una X' to disable this
" security or run vim with -x argument.
cnorea <expr> X (getcmdtype() is# ':' && getcmdline() is# 'X') ? 'x' : 'X'

" Word wrapping
set wrap
set linebreak
set display=truncate          " Show '@@@' in the last line if it is truncated

" Syntactic coloration
syntax on

" Write the viminfo file in the .vim directory
set viminfo+=n~/.vim/viminfo


""" Color scheme """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Install a colorscheme as a plugin, or copy it manually into ~/.vim/colors.
" If none is available, the default scheme will be used.

" Small patches for select colorschemes.
augroup PatchColorschemes
  autocmd!
  autocmd ColorScheme wombat256mod
    "\ Make it readable with Solarized dark terminal emulators (where yellow is
    "\ remapped to gray-ish)
    \  hi Todo ctermbg=221

  " Non-standard highlight groups used in the statusline section below.
  autocmd VimEnter,ColorScheme *
    \  if (&t_Co < 256)
    \|   hi def StlReadonly     cterm=none ctermbg=darkblue  ctermfg=white
    \|   hi def StlUnmodifiable cterm=none ctermbg=darkgrey  ctermfg=white
    \|   hi def StlRoot         cterm=none ctermbg=darkred   ctermfg=white
    \|   hi def StlRootReadonly cterm=none ctermbg=darkgreen ctermfg=white
    \| else
    \|   hi def StlReadonly     cterm=none ctermbg=31  ctermfg=15 guibg=#0087AF guifg=#FFFFD7
    \|   hi def StlUnmodifiable cterm=none ctermbg=235 ctermfg=15 guibg=#073642 guifg=#FFFFD7
    \|   hi def StlRoot         cterm=none ctermbg=124 ctermfg=15 guibg=#DC322F guifg=#FFFFD7
    \|   hi def StlRootReadonly cterm=none ctermbg=28  ctermfg=15 guibg=#008700 guifg=#FFFFD7
    \| endif
augroup END

" When true-color mode is enabled, vim will use the guibg/guifg values of the
" highlight groups, also in terminals.
" Vim will correctly set t_Co if the TERM env variable advertises correctly a
" terminal emulator that supports 24bit colors (done via terminfo or termcap),
" however a lot of terminals don't (for compatibility), and instead set the
" COLORTERM env variable, cf. https://github.com/termstandard/colors.
if (&t_Co >= 16777216 || $COLORTERM == 'truecolor')
  set termguicolors
endif

" Wombat256 doesn't support less than 256 colors
if (&t_Co >= 256)
  silent! colorscheme wombat256mod
endif

" Solarized
" (Supports t_Co < 256, but I haven't tested.)
" This color scheme takes advantage of the Solarized theme for terminal
" emulators. If it is not available or not used, a compatibility mode is
" available, but it looks inferior.
"let g:solarized_termcolors=256   " Uncomment to activate the degraded mode
"set background=dark              " Uncomment if vim detection is ineffective
"silent! colorscheme solarized


""" Line numbers """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Relative line numbers: see the 'Keymaps' section

set number
set numberwidth=5


""" Cursor """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" For some reason, unlike vim neovim does not have cursor blinking by default.
" The following configuration has been takend from nvim's `:help 'guicursor'`.
set guicursor+=a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor
              \,sm:block-blinkwait175-blinkoff150-blinkon175


""" Mouse """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set mouse=a                   " Use mouse to click
set mousehide                 " Hide mouse pointer when typing


""" Formatting """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set formatoptions+=j          " Removes comment leader when joining comments

" Indentation and tabs
set expandtab                 " Convert tabs to spaces
set tabstop=2                 " Tab width is 2 spaces
set softtabstop=2             " Same as 'tabstop'
set shiftwidth=2              " Same as 'tabstop' (used by <c-d>)
set smarttab                  " Smart tabbing on front of lines
set autoindent                " Use same indentation as previous line
set smartindent               " Auto indent with braces, etc.

" Enable <Tab> to indent several times
vnoremap < <gvgv
vnoremap > >gvgv
vnoremap <Tab> >gvgv
vnoremap <S-Tab> <gvgv
noremap <Tab> >>
noremap <S-Tab> <<


""" Search and replace """""""""""""""""""""""""""""""""""""""""""""""""""""""

set ignorecase          " Searches are case-insensitive...
set smartcase           " ... except when pattern contains uppercase letters
set gdefault            " Inverts meaning of 'g' flag in substitutions
set incsearch           " Real-time matching
set hlsearch            " Highlight matches


""" Navigation & Cursor positioning """"""""""""""""""""""""""""""""""""""""""

" Give some context when the cursor is near the border
set scrolloff=5              " Set to 999 for 'always at mid-screen'

" Highlight current line in insert mode
autocmd InsertEnter * set cursorline
autocmd InsertLeave * set nocursorline

" Jump to the next row in long wrapped line (instead of next actual line)
nnoremap k gk
nnoremap j gj
map <up> k
imap <up> <c-o><up>
map <down> j
imap <down> <c-o><down>
nnoremap gk k
nnoremap gj j

" Move cursor beyond last character
set virtualedit=onemore

" Do not move the cursor left when returning to normal mode from insert mode
" Very nice and intuitive with 'virtualedit=onemore'. Also makes a sound when
" the cursor cannot stay in place (e.g. when there is no virtualedit and the
" cursor has to move left at the end of the line)
imap <C-c> <C-c>l

" Fix navigation (ctrl+arrow) in TMUX with 'screen' terminal and 'xterm-keys'
" option enabled.
if &term =~ '^screen'
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif


""" Statusline """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set laststatus=2              " Always display status line

" Context-dependent color indication, to help determine how a file can be
" written.
"
"       User      Root
" :w    Default   Red
" :w!   Blue      Green
" :W    Purple    -
" N/A   White     White
"
" TODO: When readonly, check if current user/group owns the file (User/:W case)
"
" Note: setting a custom highlight group in the statusline instead of modifying
" directly the StatusLine group has a few benefits:
" - The statusline is updated automatically when the conditions change, no need
"   to use autocommands. In some rare cases this might not work, in which case
"   `:redrawstatus!` could be used.
" - It prevents an issue where the StatusLine color "bleeds" under window
"   separators that are next to a non-current window.
set statusline=%{%
  \(win_getid()!=g:actual_curwin)
  \?'%*'
  \:(!&l:modifiable)
  \?'%#StlUnmodifiable#'
  \:(&l:readonly&&$USER=='root')
  \?'%#StlRootReadonly#'
  \:(&l:readonly)
  \?'%#StlReadonly#'
  \:($USER=='root')
  \?'%#StlRoot#'
  \:'%*'
\%}

set statusline+=%t            " tail of the filename
set statusline+=\ %3(%m%)     " modified flag
set statusline+=%r            " read only flag
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, " file encoding
set statusline+=%{&ff}]       " file format
set statusline+=%y            " filetype
set statusline+=%=            " left/right separator
set statusline+=%7(%v:%{virtcol('$')-1}%)       " column / line length
set statusline+=\ %11(â°\ %l:%L%)                " line / total lines
set statusline+=\ %P          " percent through file

set showcmd                   " Show typed commands and selection length
set wildmenu                  " Display completion matches in the status line
set showmode                  " Show current mode (if not normal mode)


""" Invisible stuffs and landmarks """""""""""""""""""""""""""""""""""""""""""

" List of invisible characters and their visible replacement
set listchars=eol:â²,tab:â¥\ ,trail:Â·,extends:Â»,precedes:Â«,nbsp:âµ

" Toggles the visibility of invisible characters and of the right margin
" delimiter.
" If called with an argument, it is used to set the right margin delimiter.
" Example: ToggleInvisible('+2,80,100,120')
function! ToggleInvisible(...)
  if a:0 > 0
    let b:ti_cc = a:1
  elseif &textwidth > 0
    " newline is not counted in textwidth, so we let it appear "on" the line
    let b:ti_cc = '+1'
  else
    " vim uses 79 when textwidth is not set, cf. `:help gq`
    let b:ti_cc = '80'
  endif

  if &colorcolumn == b:ti_cc
    let &colorcolumn = 0
    set nolist
  else
    let &colorcolumn = b:ti_cc
    set list
  endif
endfunction


""" Miscellaneous """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Fix terminal timeout when pressing escape
function! ToggleEscTimeout()
  if ! has('gui_running')
      set ttimeoutlen=10
      augroup FastEscape
          autocmd!
          au InsertEnter * set timeoutlen=0
          au InsertLeave * set timeoutlen=1000
      augroup END
  endif
endfunction

"call ToggleEscTimeout()   " Disabled: I use <C-c> instead: always fast


" Prevents modification of readonly files
"au BufEnter * if &l:ro | set nomodifiable | endif


""" Buffers """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Stateful buffers (remembers folds, cursor position)
set viewoptions-=options                " Prevents surprises (e.g. nonumber)
autocmd BufWinLeave * silent! mkview    " Save buffer state
autocmd BufWinEnter * silent! loadview  " Load buffer state


""" Keymaps """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Toggle paste mode
set pastetoggle=<F2>

" Toggle mouse capture and line numbers for easy copying
" Plugin: toadjaune/vim-togglemouse
map <F3> :set number!<CR> <Plug>ToggleMouse

" Toggle invisible characters
map <F4> :call ToggleInvisible()<CR>
map! <F4> <C-o><F4>

" Toggle undo tree panel
" Plugin: sjl/gundo.vim
nnoremap <F6> :GundoToggle<CR>

" Toggle file explorer
" Plugin: preservim/nerdtree
nnoremap <silent> <F8> :NERDTreeToggle<CR>

" Remove search highlight, update the highlighting and redraw screen
nnoremap <silent> <C-l> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-l>

" Toggle relative numbers
nnoremap <Leader>r :set relativenumber!<CR>

" Split screen
nnoremap <leader>s :vsplit<CR>        " Quick access to my favorite one
nnoremap <leader>ss :vsplit<CR>       " Even quicker access to my favorite one
nnoremap <leader>sx :split<CR>        " 'x' is kind of 'below'
nnoremap <leader>sd :vsplit<CR>       " For consistency

" Highlight current line temporarily (for when I'm lost)
nnoremap <leader>l :set cursorline!<CR>

" Toggle syntax group debugging
" Requires the HiLinkTrace plugin by Charles E. Campbell (aka. Dr Chip)
" Source: http://www.drchip.org/astronaut/vim/index.html#HILINKS
map <S-F9> :HLT!<CR>

" Lighter version of syntax group debugging
" Plugin: vim-scripts/SyntaxAttr.vim
map <F9> :call SyntaxAttr()<CR>


""" That's all Folks! """"""""""""""""""""""""""""""""""""""""""""""""""""""""
