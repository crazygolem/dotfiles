#!/bin/bash

### USAGE ######################################################################
read -r -d '' USAGE <<'EOF'
Execute a command repeatedly until it succeeds. A cheat code is printed from
time to time before executing the command again to bring good luck.

SYNOPSIS
    konami [OPTION...] COMMAND ARG...

OPTIONS
    -h  Show this help and exit.

    -b COUNT
        Prints a cheat code every COUNT command executions.

    -c LIMIT
        Limits the number of command execution to the specified LIMIT. By
        default `konami` will run until interrupted.

    -n INTERVAL
        Execute the command at specified INTERVAL. Time units suffixes as
        specified by `sleep` can be used.

NOTES
    The command and arguments are passed to `exec` so you don't need to use
    extra quoting to get the desired effect. On the other hand, this means that
    you cannot use shell features such as pipes or redirections directly in
    your command. If you want to do that, you have to write them as a command
    to `sh -c`, e.g.:

        konami sh -c "echo test >&2; false"
EOF
################################################################################

BTNS=(↑ ↓ ← → A B)
KONAMI='↑ ↑ ↓ ↓ ← → ← → B A'


# Output a single random button
rb() {
  echo ${BTNS[RANDOM % ${#BTNS[@]}]}
}

# Try to output the KONAMI code, but never succeed
not_konami() {
  local try="$KONAMI"
  until [ "$try" != "$KONAMI" ]; do
    try="$(rb) $(rb) $(rb) $(rb) $(rb) $(rb) $(rb) $(rb) $(rb) $(rb)"
  done

  echo "$try"
}


BATCH=5       # Number of command executions before printing a cheat code
INTERVAL=1s   # Interval between command executions
LIMIT=        # Limit the number of attempts to run the command

while getopts 'hb:c:n:' opt; do
  case "$opt" in
    h) echo "$USAGE" ; exit 0 ;;
    \?) exit 1 ;;
    b) BATCH="$OPTARG" ;;
    c) LIMIT="$OPTARG" ;;
    n) INTERVAL="$OPTARG" ;;
  esac
done
shift $((OPTIND-1))

while true; do
  if out="$(exec "$@")"; then
    echo "$KONAMI"
    [ -n "$out" ] && echo "$out"
    exit 0
  else
    ((iter++))
    if (( LIMIT )) && (( iter >= LIMIT )); then
      exit 1
    fi

    sleep "$INTERVAL"
    if ! (( iter % BATCH )); then
      not_konami
    fi
  fi
done
