#!/bin/bash
#
# Get a shell into a docker container specified by (part of) its name
#

### USAGE ######################################################################
read -r -d '' USAGE <<'EOF'
Get a shell into a docker container specified by (part of) its name or ID.

USAGE

  de [OPTIONS] FILTER

OPTIONS

  -h    Show this help and exit

  -e    Match on the specified FILTER exactly, by container name.
        Use this option if the target container's name is a substring of
        another's.

  -s    Use sh instead of bash

  -S SHELL
        Use the specified SHELL instead of bash
EOF
################################################################################

names() {
  docker container inspect --format='{{.Name}}' "$@"
}

lookup() {
  docker container ls -q -f "$1"
}

[ "$(getopt -T >/dev/null 2>&1; echo $?)" = 4 ] || \
  >&2 echo 'WARNING: Missing recent GNU getopt'
OPTS=$(getopt -o hesS: --name "$0" -- "$@") || exit 1
eval set -- "$OPTS"
while :; do
  case "$1" in
    -h) echo "$USAGE"; exit 0 ;;
    -e) exact=1; shift ;;
    -s) command=sh ; shift ;;
    -S) command="$2"; shift 2 ;;
    --) shift; break ;;
    *)  >&2 echo "Internal error, unhandled option: $1"; exit 1 ;;
  esac
done

if (( exact )); then
  mapfile -t instance < <(lookup "name=^${1}$")
else
  mapfile -t instance < <(lookup "name=${1}")
fi

# Exact matching on ID doesn't make much sense as it would only match the entire
# ID instead of the truncated one as output by `docker ps`
if ! ((exact)) && [ ${#instance[@]} -eq 0 ]; then
  >&2 echo "No container matching by name, attempting ID match"
  mapfile -t instance < <(lookup "id=${1}")
fi

if [ ${#instance[@]} -eq 0 ]; then
  >&2 echo "No matching container"
  exit 1
elif [ ${#instance[@]} -gt 1 ]; then
  >&2 echo "Multiple matching containers:"
  >&2 names "${instance[@]}"
  exit 2
fi

echo "Connecting to ${instance} $(names "${instance}")"
docker container exec -it "${instance}" "${command:-bash}"
