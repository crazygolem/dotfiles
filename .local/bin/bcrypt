#!/usr/bin/env python3

import argparse
import bcrypt
import inspect
import sys


def cost(value):
    cost = int(value)
    if cost < 4 or cost > 31:
        raise argparse.ArgumentTypeError("The cost value must be between 4 and 31.")
    return cost


def alg(value):
    match value:
        case '2a' | '$2a$':
            return b'2a'
        case '2b' | '$2b$':
            return b'2b'
        case _:
            raise argparse.ArgumentTypeError("Supported algorithms are '2a' and '2b'.")


def salt(value):
    if len(value) < 22:
        value = value + '.' * (22 - len(value))
    if invalid := set(value) - set('./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'):
        raise argparse.ArgumentTypeError(f"Invalid characters: {''.join(sorted(invalid))}")
    if (length := len(value)) != 22:
        raise argparse.ArgumentTypeError(f"Must be 22 characters long, but was {length}")
    if not value.endswith(('.', 'O', 'e', 'u')):
        raise argparse.ArgumentTypeError("Must end with '.', 'O' (uppercase o), 'e' or 'u'")
    return value


parser = argparse.ArgumentParser(description="Generate bcrypt hashes.")
parser.add_argument('input', type=str, nargs='?',
                    help="String to hash. If omitted, the input is read from stdin.")
parser.add_argument('--salt', '-s', type=salt,
                    help="A string of max 22 characters (A-Z, a-z, 0-9, '.' and '/') ending with '.', 'O', 'e' or 'u'.")
parser.add_argument('--cost', '-c', metavar='N', type=cost,
                    # Note: the bcrypt lib incorrectly names this argument 'rounds', but internally uses it as a 'cost'.
                    # Note: for the bcrypt algorithm, rounds = 2^cost
                    default=inspect.signature(bcrypt.gensalt).parameters['rounds'].default or 12,
                    help="A number between 4 and 31, influencing the number of rounds.")
parser.add_argument('--algorithm', '-a', metavar='ALG', type=alg,
                    default=inspect.signature(bcrypt.gensalt).parameters['prefix'].default or b'2b',
                    help="The version of the hash algorithm to use. Only '2a' and '2b' are supported.")
parser.add_argument('--verbose', '-v', action='store_true',
                    help="Also print the parameters by themselves after the final output.")


if __name__ == "__main__":
    args = parser.parse_args()

    if args.salt:
        salt = f'${args.algorithm.decode()}${args.cost:02}${args.salt}'.encode()
    else:
        salt = bcrypt.gensalt(rounds=args.cost, prefix=args.algorithm)

    if args.input is not None:
        input = args.input.encode()
    else:
        input = sys.stdin.read().encode()

    # The bcrypt module has this limit (on my system?)
    # https://security.stackexchange.com/a/39851
    if (length := len(input)) > 72:
        print(f"WARNING: Input has {length} bytes, truncated to 72 bytes.", file=sys.stderr)

    hash = bcrypt.hashpw(input, salt)

    if args.verbose:
        print(hash.decode(), salt.decode())
    else:
        print(hash.decode())
