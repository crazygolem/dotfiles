#!/usr/bin/sh

# Track your dotfiles in a bare git repository.
#
# USAGE
#   homegit init
#     Initializes homegit from scratch.
#
#   homegit clone URL
#     Initializes homegit from an existing repository located at URL.
#
#   homegit [GIT-OPTIONS] GIT-COMMAND [GIT-ARGS]
#     Executes git commands on your homegit, e.g. status, add, commit.
#
# CREDITS
#   This script has been inspired by Nicoa Paolucci's article at
#   https://developer.atlassian.com/blog/2016/02/best-way-to-store-dotfiles-git-bare-repo/

REPO="${XDG_DATA_HOME:-$HOME/.local/share}"/homegit


if [ "$1" = init ]; then
  git init --bare "$REPO"
  echo "$REPO" >>"$REPO"/info/exclude
  git --git-dir="$REPO" --work-tree=$HOME config --local status.showUntrackedFiles no
elif [ "$1" = clone ]; then
  git clone --bare "$2" "$REPO"
  echo "$REPO" >>"$REPO"/info/exclude
  git --git-dir="$REPO" --work-tree=$HOME config --local status.showUntrackedFiles no

  # Checkout the actual content into the $HOME
  # Can fail if existing files would be overwritten (e.g. bashrc, zshrc). If it
  # happens, just remove/rename the files and run `githome checkout` again.
  git --git-dir="$REPO" --work-tree=$HOME checkout
else
  exec git --git-dir="$REPO" --work-tree=$HOME "$@"
fi
